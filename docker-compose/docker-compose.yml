version: "3.8"
services:

  mysql:
    image: mysql:5.7
    container_name: mysql
    # restart: always
    ports:
      - 3306:3306
    environment:
      - MYSQL_ROOT_PASSWORD=SecretPassword@root123
      - MYSQL_DATABASE=business
      - MYSQL_USER=gientest
      - MYSQL_PASSWORD=SecretPassword@123
    volumes:
      - ./mysql/data:/var/lib/mysql
      - ./mysql/conf:/etc/mysql/conf.d

  redis:
    # 镜像及版本      
    image: redis
    # 自定义容器名
    container_name: redis
    # docker启动时,自动启动该容器
    # restart: always
    # 挂载映射
    volumes:
      # <本地配置文件> : <docker中的配置文件> : <ro:docker容器对该文件只读,默认是rw可读可写>
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
      # <本地数据目录> : <docker中的数据目录>
      - ./redis/data:/data
      # <本地日志目录> : <docker中的日志目录>
      # redis不具有自动创建/logs的权限，如果redis.conf中指定的相对位置,则数据目录已经可以映射出日志文件
      #- ../redis/logs:/logs
    # docker执行的启动命令
    command: redis-server /etc/redis/redis.conf
    ports:
     # <本地端口> : <docker容器端口>
     - 6379:6379

  rocketmqNameServer:
    image: rocketmqinc/rocketmq
    container_name: rocketmqNameServer
    # restart: always
    volumes:
      # 挂载路径，冒号左边为服务器本地路径，冒号右边为容器内部路径
      - ./rocketMQ/nameServer/logs:/root/logs
      - ./rocketMQ/nameServer/store:/root/store
    environment:
      MAX_POSSIBLE_HEAP: 100000000
    command:
      # 服务启动
      sh mqnamesrv 
    #network_mode: host
    ports: 
      - "9876:9876"
 
  rocketmqBroker:
    image: rocketmqinc/rocketmq
    container_name: rocketmqBroker
    # restart: always
    volumes:
      # 挂载路径，冒号左边为服务器本地路径，冒号右边为容器内部路径
      - ./rocketMQ/broker/logs:/root/logs
      - ./rocketMQ/broker/store:/root/store
      - ./rocketMQ/broker.conf:/opt/rocketmq-4.4.0/conf/broker.conf
    links:
      - rocketmqNameServer:namesrv
    
    environment:
      NAMESRV_ADDR: namesrv:9876
      MAX_POSSIBLE_HEAP: 200000000
    command:
      # 服务启动
      sh mqbroker -c /opt/rocketmq-4.4.0/conf/broker.conf
    #network_mode: host
    ports: 
      - "10911:10911"
      - "10909:10909"
      
  rocketmqConsole:
    image: pangliang/rocketmq-console-ng
    container_name: rocketmqConsole
    links:
      - rocketmqNameServer:namesrv
    environment:
      JAVA_OPTS: "-Drocketmq.namesrv.addr=namesrv:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false"
    #network_mode: host
    ports: 
      - "19999:8080"

  nacos:
    image: nacos/nacos-server
    container_name: nacos
    # restart: alway
    ports:
      - 8848:8848
      - 9848:9848
    depends_on:
      - mysql
    environment:
      # 支持主机名可以使用hostname,否则使用ip，默认ip
      - PREFER_HOST_MODE=hostname
      # 单机模式
      - MODE=standalone
      - MYSQL_SERVICE_HOST=mysql
      - MYSQL_SERVICE_DB_NAME=nacos
      - MYSQL_SERVICE_PORT=3306
      - MYSQL_SERVICE_USER=root
      - MYSQL_SERVICE_PASSWORD=SecretPassword@root123
      - MYSQL_DB_PARAM=characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&serverTimezone=Asia/Shanghai
      - NACOS_APPLICATION_PORT=8848
      - NACOS_AUTH_ENABLE=true
      - TZ="Asia/Shanghai"
      # 内存配置
      - JVM_XMS=512m
      - JVM_MMS=320m
    volumes:
      - ./nacos/logs:/home/nacos/logs

  seata-server:
    image: seataio/seata-server
    container_name: seata-server
    # restart: always
    hostname: seata-server
    ports:
      # 1.5.x版本后默认用7091端口
      - 7091:7091
      - 8091:8091
    environment:
      - SEATA_PORT=8091
      # 要写宿主机IP，否则报错
      - SEATA_IP=172.31.160.1
      # - STORE_MODE=file
      # Seata server启动成功后，替换application.yml文件后再进行重启，使用以下命令重启
      # docker cp application.yml seata-server:/seata-server/resources/application.yml
      # docker restart seata-server